package com.baesystems.jarvulnerabilitycheck.controller;

import com.baesystems.jarvulnerabilitycheck.Service.JarService;
import com.baesystems.jarvulnerabilitycheck.exception.JarServiceException;
import com.baesystems.jarvulnerabilitycheck.model.LibEntry;
import com.baesystems.jarvulnerabilitycheck.payloads.AddGradleDepPayload;
import com.baesystems.jarvulnerabilitycheck.payloads.AddGradleDepResponsePayload;
import jakarta.validation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Set;

@RestController
@RequestMapping("/jar")
public class JarController {

    private final JarService jarService;

    public JarController(@Autowired JarService jarService) {
        this.jarService = jarService;
    }

    @PostMapping(value = "/addGradleDependancies", consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public AddGradleDepResponsePayload addGradleDep(@RequestBody() AddGradleDepPayload payload) throws JarServiceException {
        // Validate the payload
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        final Set<ConstraintViolation<AddGradleDepPayload>> violations = validator.validate(payload);
        if (!violations.isEmpty()) {
            throw new ConstraintViolationException(violations);
        }

        // Process the file given in the payload.
        final Path filePath = Paths.get(payload.getFileName());
        final Set<LibEntry> libEntries = this.jarService.processGradleDepOutputFile(filePath);

        return new AddGradleDepResponsePayload(libEntries);
    }
}
